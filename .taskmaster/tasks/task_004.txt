# Task ID: 4
# Title: Develop Organization Management
# Status: pending
# Dependencies: 2, 3, 25, 26, 27
# Priority: high
# Description: Implement organization and user management features for multi-tenancy with Clerk + Circle authentication and blockchain wallet integration.
# Details:
Create APIs for organization creation, user roles management, and team invitations. Implement role-based access control (Owner, Admin, Member). Integrate Clerk + Circle authentication to support blockchain wallets, treasury wallets, and gas sponsor wallets. Support user identification by wallet addresses and email invitations that create wallets. Implement organization settings for gas sponsorship policies and wallet allowlists/blocklists. Ensure database model synchronization between Prisma and SQLAlchemy, respecting organizationId-based Row Level Security and matching field names and relationships.

# Test Strategy:
Test organization creation, user role assignments, and access control by simulating different user roles and permissions. Verify blockchain wallet integration, including treasury and gas sponsor wallets. Test user invitations by wallet address and email, and ensure API keys are tied to organization wallets. Validate audit logs for both traditional actions and blockchain transactions. Ensure API responses match TypeScript types generated by Prisma and verify that both ORMs handle multi-tenant data isolation correctly.

# Subtasks:
## 1. Design Database Schema [done]
### Dependencies: None
### Description: Create a database schema to support multi-tenant organization management, including tables for organizations, users, roles, invitations, API keys, and audit logs.
### Details:
Ensure the schema supports CRUD operations for organizations, role assignments, and logging for compliance. Include support for wallet addresses as primary keys and fields for treasury and gas sponsor wallets.

## 2. Develop Organization CRUD API [done]
### Dependencies: 4.1
### Description: Implement API endpoints for creating, reading, updating, and deleting organizations.
### Details:
Include endpoints for organization creation, retrieval, update, and deletion with appropriate access control checks. Ensure integration with blockchain wallets and settings for gas sponsorship policies. Respect organizationId-based Row Level Security and ensure API responses match TypeScript types generated by Prisma.

## 3. Implement User Invitation and Role Management [done]
### Dependencies: 4.1, 4.2
### Description: Create API endpoints for inviting users to organizations and managing their roles.
### Details:
Support role assignments such as OWNER, ADMIN, and MEMBER, and ensure users can be invited and assigned roles correctly. Allow invitations by wallet address or email, with email invitations creating wallets. Ensure Python models match Prisma schema exactly.

## 4. Develop API Key Management [pending]
### Dependencies: 4.1, 4.2
### Description: Implement functionality for generating and managing API keys for organizations.
### Details:
Ensure API keys can be created, revoked, and associated with specific organization wallets for secure Engine access. Ensure both ORMs handle multi-tenant data isolation correctly.
<info added on 2025-06-10T07:28:01.084Z>
Ensure API key management for direct API access using Clerk + Circle JWT, including generation, viewing, and revocation of keys associated with specific organization wallets. Additionally, implement integration key management for connecting payment links to agents, allowing organizations to generate, view, and revoke these keys to authorize agent payments through public endpoints.
</info added on 2025-06-10T07:28:01.084Z>

## 5. Implement Audit Logging for Compliance [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4
### Description: Develop a logging system to track changes and access for compliance purposes.
### Details:
Ensure all critical actions are logged, including organization changes, role assignments, API key usage, and blockchain transactions.
<info added on 2025-06-10T07:27:37.606Z>
Ensure integration key management, including authorizing agents to process payments through public payment link endpoints, is also logged and managed alongside API keys for direct API access.
</info added on 2025-06-10T07:27:37.606Z>

## 6. Implement Wallet Security Features [pending]
### Dependencies: 4.1, 4.2
### Description: Develop features for wallet allowlists and blocklists to enhance security.
### Details:
Ensure organizations can manage allowlists and blocklists for wallets to control access and enhance security.

## 7. Ensure Database Model Synchronization [done]
### Dependencies: 4.1
### Description: Coordinate with Task 25 to ensure database model synchronization between Prisma and SQLAlchemy.
### Details:
Ensure that the implementation approach (manual sync, code generation, or Prisma Client Python) is in place before implementing Python API endpoints. Python models must match Prisma schema exactly, using the same field names and relationships.

## 8. Implement OrganizationRepository with multi-tenancy [done]
### Dependencies: 4.2
### Description: Create OrganizationRepository to handle organization data persistence with proper multi-tenancy isolation.
### Details:
Implement the following repository methods:
- create_organization() - Create new organization with owner
- get_organization_by_slug() - Find org by unique slug
- get_user_organizations() - List all orgs a user belongs to
- add_user_to_organization() - Add member with role
- remove_user_from_organization() - Remove member
- update_user_role() - Change member's role
- get_organization_members() - List all members with roles
- check_user_permission() - Verify user has permission in org
- get_organization_with_stats() - Fetch org with payment/user counts

All methods must respect multi-tenancy boundaries and use the Unit of Work pattern for transactions.

