# Task ID: 3
# Title: Implement User Authentication
# Status: pending
# Dependencies: 1, 25, 26, 27
# Priority: high
# Description: Set up user authentication using Thirdweb for secure access control, with automatic wallet creation for users logging in via Google Auth or other providers.
# Details:
Integrate Thirdweb authentication into the Next.js frontend for seamless web2/web3 login options, including email, social (like Google Auth), and wallet connections. Implement Sign in with Ethereum (SIWE) standard with JWT tokens stored in cookies. Ensure server actions are used for a secure authentication flow. Integrate with the Python backend to validate Thirdweb JWTs and handle automatic blockchain wallet creation for web2 logins. The backend also needs to support a dual authentication model where authenticated users use JWT tokens while payment links use integration keys. Obtain Client ID and Secret Key from the Thirdweb dashboard and use a private key for JWT signing.

# Test Strategy:
Test user registration, login, and session persistence using Thirdweb Connect. Verify JWT token validity, expiration handling, and backend validation. Ensure seamless login via email, social (including Google Auth), and wallet connections, test automatic wallet creation for web2 logins, and validate the dual authentication model where authenticated users use JWT tokens while payment links use integration keys.

# Subtasks:
## 1. Set up Thirdweb client with credentials [pending]
### Dependencies: None
### Description: Configure the Thirdweb client with necessary credentials including client ID, secret key, and auth private key.
### Details:
Follow the Thirdweb documentation to properly set up the client in the Next.js application.

## 2. Implement ThirdwebProvider in Next.js app layout [pending]
### Dependencies: 3.1
### Description: Integrate the ThirdwebProvider component into the Next.js application layout to enable authentication features.
### Details:
Ensure the provider is wrapped around the application to manage authentication state.

## 3. Create ConnectButton component with auth callbacks [pending]
### Dependencies: 3.2
### Description: Develop a ConnectButton component that handles authentication callbacks such as isLoggedIn, doLogin, getLoginPayload, and doLogout.
### Details:
Use the Thirdweb hooks and methods to manage authentication state and actions. Include support for Google Auth and other social providers.

## 4. Implement server actions for secure auth flow [pending]
### Dependencies: 3.3
### Description: Create server-side actions to handle secure authentication flows including generatePayload, login, isLoggedIn, and logout.
### Details:
Ensure these actions are secure and properly manage user sessions. Include support for the dual authentication model where authenticated users use JWT tokens while payment links use integration keys.

## 5. Set up JWT generation and cookie management [pending]
### Dependencies: 3.4
### Description: Implement JWT token generation and manage cookies for session persistence.
### Details:
Ensure tokens are securely generated and stored, and cookies are managed for user sessions. Include support for the dual authentication model where authenticated users use JWT tokens while payment links use integration keys.

## 6. Create Python FastAPI endpoints to validate Thirdweb JWTs [pending]
### Dependencies: 3.5
### Description: Develop FastAPI endpoints to validate JWTs generated by Thirdweb for authentication.
### Details:
Ensure endpoints are secure and correctly validate the JWTs for user authentication. Include support for the dual authentication model where authenticated users use JWT tokens while payment links use integration keys.

## 7. Implement automatic wallet creation for web2 logins [pending]
### Dependencies: 3.6
### Description: Develop functionality to automatically create wallets for users logging in via web2 methods such as email or social logins (including Google Auth).
### Details:
Integrate with Thirdweb to create wallets seamlessly during the authentication process.

## 8. Implement UserRepository with authentication methods [pending]
### Dependencies: 3.6
### Description: Create UserRepository using the repository pattern to handle user data persistence and authentication-related queries.
### Details:
Implement the following methods in UserRepository:
- create_user() - Create new user with Thirdweb auth data
- get_user_by_email() - Find user by email for auth
- get_user_by_auth_provider_id() - Find user by Thirdweb provider ID
- get_or_create_user() - Upsert pattern for social/wallet logins
- update_last_login() - Track user activity
- link_wallet_to_user() - Associate blockchain wallet with user
- get_user_with_organizations() - Fetch user with their org memberships

Ensure all methods use async/await and handle the multi-tenancy context properly.

